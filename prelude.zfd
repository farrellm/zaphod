(def id
     (forall a (-> [a] a))
     (lambda (x) x))

(def compose
     (forall a (forall b (forall c
       (-> [(-> [b] c) (-> [a] b)]
           (-> [a] c)))))
     (lambda (f g) (lambda (x) (f (g x)))))

(def car
     (forall a (-> [a] Top))
     (unsafe-coerce fst))

(def cdr (forall a (-> [a] Top))
     (unsafe-coerce snd))

(def cadr (compose car cdr))
(def cddr (compose cdr cdr))
(def caddr (compose car cddr))

(def Bool Type
     'Bool)
(def Bool (: 'Bool Type))
(def True Bool
     (unsafe-coerce 'True))
(def False Bool
     (unsafe-coerce 'False))

(def List (lambda (a) (: ['List a] Type)))
(def Nil (forall a (List a))
     (unsafe-coerce 'Nil))
(def Cons (forall a (-> [a (List a)] (List a)))
     (lambda (x xs) (unsafe-coerce ['Cons x xs])))

(def append
     (forall a (forall b (-> [a b] Top)))
     (lambda (xs ys)
       (if (is-nil xs)
           (: ys Top)
           (cons (car xs) (append (cdr xs) ys)))))

(def reverse'
     (forall a (forall b (-> [a b] Top)))
     (lambda (xs ys)
       (if (is-nil xs)
           (: ys Top)
           (reverse' (cdr xs) (cons (car xs) ys)))))

(def reverse
     (forall a (-> [a] Top))
     (lambda (xs) (reverse' xs ())))

(def let1
     (-> [Top Top Top] Top)
     (lambda (x v e)
       [['lambda [x] e] v]))

(def let'
     (-> [Top Top] Top)
     (lambda (ps e)
       (if (is-nil ps) e
           (let1 (car (car ps))
                 (cadr (car ps))
                 (let' (cdr ps) e)))))

(def let
     (-> [Top Top] Top)
     (macro (ps e) (let' ps e)))

(def defn
     (-> [(Symbol . Top) Type Top] Top)
     (macro (p t e)
       ['def (car p) t ['lambda (cdr p) e]]))
