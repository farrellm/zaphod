(def id
     (forall a (-> [a] a))
     (lambda (x) x))

(def compose
     (forall a (forall b (forall c
         (-> [(-> [b] c) (-> [a] b)]
             (-> [a] c)))))
     (lambda (f g) (lambda (x) (f (g x)))))

(def car
     (forall a (-> [a] Top))
     (unsafe-coerce fst))

(def cdr (forall a (-> [a] Top))
     (unsafe-coerce snd))

(def cadr (compose car cdr))
(def cddr (compose cdr cdr))
(def caddr (compose car cddr))

(def Bool Type
     'Bool)
(def Bool (: 'Bool Type))
(def True Bool
     (unsafe-coerce 'True))
(def False Bool
     (unsafe-coerce 'False))

(def List (lambda (a) (: ['List a] Type)))
(def Nil (forall a (List a))
     (unsafe-coerce 'Nil))
(def Cons (forall a (-> [a (List a)] (List a)))
     (lambda (x xs) (unsafe-coerce ['Cons x xs])))
