(def id (: (lambda (x) x)
           (forall a (-> [a] a))))

(def compose (: (lambda (f g) (lambda (x) (f (g x))))
                (forall a (forall b (forall c
                  (-> [(-> [b] c) (-> [a] b)]
                      (-> [a] c)))))))

(def car (: (unsafe-coerce fst)
            (forall a (-> [a] Top))))

(def cdr (: (unsafe-coerce snd)
            (forall a (-> [a] Top))))

(def cadr (compose car cdr))
(def cddr (compose cdr cdr))
(def caddr (compose car cddr))

(def Bool (: 'Bool Type))
(def True (: (unsafe-coerce 'True) Bool))
(def False (: (unsafe-coerce 'False) Bool))

(def List (lambda (a) (: ['List a] Type)))
(def Nil (: (unsafe-coerce 'Nil)
            (forall a (List a))))
(def Cons (: (lambda (x xs) (unsafe-coerce ['Cons x xs]))
             (forall a (-> [a (List a)] (List a)))))
