(def car
     (forall a (-> [a] Top))
     (unsafe-coerce fst))

(def cdr (forall a (-> [a] Top))
     (unsafe-coerce snd))

(def defn
     (-> [(Symbol . Top) Type Top] Top)
     (macro (p t e)
       ['def (car p) t ['lambda (cdr p) e]]))

(defn (forall' us e)
  (-> [Top Top] Top)
  (if (is-symbol us)
      (: ['forall us e] Top)
      (if (is-nil us)
          e
          ['forall (car us) (forall' (cdr us) e)])))

(def forall
     (-> [Top Top] Top)
     (macro (us e) (forall' us e)))

(defn (compose f g)
  (forall (a b c)
          (-> [(-> [b] c) (-> [a] b)]
              (-> [a] c)))
  (lambda (x) (f (g x))))

(def caar (compose car car))
(def cadr (compose car cdr))
(def cdar (compose cdr car))
(def cddr (compose cdr cdr))
(def caddr (compose car cddr))

(defn (let1 x v e)
  (-> [Top Top Top] Top)
  [['lambda [x] e] v])

(defn (let' ps e)
  (-> [Top Top] Top)
  (if (is-nil ps) e
      (let1 (car (car ps))
            (cadr (car ps))
            (let' (cdr ps) e))))

(def let
     (-> [Top Top] Top)
     (macro (ps e) (let' ps e)))

(defn (foralls xs e)
  (-> [Top Top] Top)
  (if (is-nil xs)
      e
      ['forall (car xs) (foralls (cdr xs) e)]))

(defn (gen-syms xs)
  (-> [Top] Top)
  (if (is-nil xs) (: () Top)
      (cons (unsafe-gensym) (gen-syms (cdr xs)))))

(defn (constructor-simple n c) (-> [Top Top] Top)
  (if (is-symbol c)
      (: ['def c n ['unsafe-coerce ['quote c]]]
         Top)
      (let ((c' (cons (car c) (gen-syms (cdr c)))))
        ['defn c'
          ['-> (cons 'tuple (cdr c)) n]
          ['unsafe-coerce (cons 'tuple (cons ['quote (car c')] (cdr c')))]])))

(defn (constructors-simple n cs) (-> [Top Top] Top)
  (if (is-nil cs)
      (: [] Top)
      (cons
       (constructor-simple n (car cs))
       (constructors-simple n (cdr cs)))))

(defn (constructor-complex n xs c) (-> [Top Top Top] Top)
  (if (is-symbol c)
      (: ['def c
               (foralls xs (cons n xs))
               ['unsafe-coerce ['quote c]]]
         Top)
      (let ((c' (cons (car c) (gen-syms (cdr c)))))
        ['defn c'
          (foralls xs ['-> (cons 'tuple (cdr c)) (cons n xs)])
          ['unsafe-coerce (cons 'tuple (cons ['quote (car c')] (cdr c')))]])))

(defn (constructors-complex n xs cs) (-> [Top Top Top] Top)
  (if (is-nil cs)
      (: () Top)
      (cons
       (constructor-complex n xs (car cs))
       (constructors-complex n xs (cdr cs)))))

(defn (data-simple n cs) (-> [Top Top] Top)
  (cons
   ['def n 'Type ['quote n]]
   (constructors-simple n cs)))

(defn (data-complex n xs cs) (-> [Top Top Top] Top)
  (cons
   ['def n ['lambda xs [': (cons 'tuple (cons ['quote n] xs)) 'Type]]]
   (constructors-complex n xs cs)))

(defn (data' d cs) (-> [Top Top] Top)
  (cons
   'begin
   (if (is-symbol d)
       (data-simple d cs)
       (data-complex (car d) (cdr d) cs))))

(def data
     (-> Top Top)
     (macro d (data' (car d) (cdr d))))

(defn (cond' cs)
  (-> [Top] Top)
  (if (is-nil cs)
      (: () Top)
      (let ((c (car cs))
            (cs' (cdr cs)))
        (if (is-symbol (car c))
            (cadr c)
            ['if (car c) (cadr c) (cond' cs')]))))

(def cond
     (-> Top Top)
     (macro cs (cond' cs)))
