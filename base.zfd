(def car
     (-> (cons Any ()) Any)
     (unsafe-coerce fst))

(def cdr
     (-> (cons Any ()) Any)
     (unsafe-coerce snd))

(def tuple'
     (-> (cons Any ()) Any)
     (lambda (t)
       (if (is-nil t) (: () Any)
           (cons 'cons
                 (cons (car t)
                       (cons (tuple' (cdr t))
                             ()))))))

(def tuple
     (-> Any Any)
     (macro t (tuple' t)))

(def caar (-> [Any] Any) (lambda (x) (car (car x))))
(def cdar (-> [Any] Any) (lambda (x) (cdr (car x))))
(def cadr (-> [Any] Any) (lambda (x) (car (cdr x))))
(def cddr (-> [Any] Any) (lambda (x) (cdr (cdr x))))

(def caaar (-> [Any] Any) (lambda (x) (car (car (car x)))))
(def caadr (-> [Any] Any) (lambda (x) (car (car (cdr x)))))
(def cadar (-> [Any] Any) (lambda (x) (car (cdr (car x)))))
(def cdaar (-> [Any] Any) (lambda (x) (cdr (car (car x)))))
(def caddr (-> [Any] Any) (lambda (x) (car (cdr (cdr x)))))
(def cdadr (-> [Any] Any) (lambda (x) (cdr (car (cdr x)))))
(def cddar (-> [Any] Any) (lambda (x) (cdr (cdr (car x)))))
(def cdddr (-> [Any] Any) (lambda (x) (cdr (cdr (cdr x)))))

(def top-foldr
     (_forall a (_forall b (-> [(-> [b a] a) a Any] a)))
     (lambda (f i l)
       (if (is-nil l) i
           (f (unsafe-coerce (car l))
              (top-foldr f i (cdr l))))))

(def alist-lookup
     (-> [Any Any] Any)
     (lambda (k l)
       (if (top-eq k (caar l))
           (cdar l)
           (alist-lookup k (cdr l)))))

(def alist-lookup'
     (-> [Any Any Any] Any)
     (lambda (k d l)
       (if (is-nil l)
           (: d Any)
           (if (top-eq k (caar l))
               (cdar l)
               (alist-lookup' k d (cdr l))))))

(def mk-forall
     (-> [Symbol Any] Any)
     (lambda (u e)
       ['_forall u e]))

(def forall
     (-> [Any Any] Any)
     (macro (us e)
       (top-foldr mk-forall e us)))

(def mk-let
     (forall (a) (-> [[Symbol Any] a] Any))
     (lambda (b e)
       (if (symbol-eq (fst b) '_)
           (: e Any)
           [['lambda [(fst b)] e] (fst (snd b))])))

(def let
     (-> [Any Any] Any)
     (macro (ps e)
       (top-foldr mk-let e ps)))

(def defn'
     (-> [Symbol Any Any Any] Any)
     (lambda (n p t e)
       (if (is-symbol (car t))
           (: ['def n t ['lambda p e]] Any)
           (let ((a (alist-lookup' 'forall () t))
                 (c (alist-lookup' '=> () t))
                 (f (alist-lookup '-> t))
                 (t' ['forall a
                              (top-foldr
                               (lambda (i r) (: ['=> i r] Any))
                               (cons '-> f)
                               c)]))
             ['def n t'
                   (top-foldr
                    (lambda (_ r) (: ['implicit (unsafe-gensym) r] Any))
                    ['lambda p e]
                    c)]))))

(def defn
     (-> [(cons Symbol Any) Any Any] Any)
     (macro (p t e)
       (defn' (fst p) (snd p) t e)))

(def defmacro
     (-> [(cons Symbol Any) Any Any] Any)
     (macro (p t e)
       ['def (car p) t ['macro (cdr p) e]]))

(defn (top-foldl f i l)
  (forall (a b) (-> [(-> [a b] a) a Any] a))
  (if (is-nil l) i
      (top-foldl f (f i (unsafe-coerce (car l))) (cdr l))))

(defn (top-map f l)
  (forall (a b) (-> [(-> [a] b) Any] Any))
  (top-foldr (lambda (x ys)
               (: (cons (f x) ys) Any))
             ()
             l))

(defn (top-append xs ys)
  (forall (a b) (-> [a b] Any))
  (top-foldr (lambda (x a) (: (cons x a) Any))
             ys
             xs))

(defn (compose f g)
  (forall (a b c)
          (-> [(-> [b] c) (-> [a] b)]
              (-> [a] c)))
  (lambda (x) (f (g x))))

(defn (foralls xs e)
  (-> [Any Any] Any)
  (if (is-nil xs)
      (: e Any)
      ['forall xs e]))

(defn (unsafe-gensyms xs)
  (-> [Any] Any)
  (top-map (lambda (_) (unsafe-gensym)) xs))

(defn (const x)
  (forall (a b) (-> [a] (-> [b] a)))
  (lambda (_) x))

(defn (constructor1 n c)
  (-> [Any Any] Any)
  (if (is-symbol c)
      (: ['def c
               n
               ['unsafe-coerce ['quote c]]]
         Any)
      (let ((c' (cons (car c) (unsafe-gensyms (cdr c)))))
        ['defn c'
          ['-> (cons 'tuple (cdr c)) n]
          ['unsafe-coerce (cons 'tuple (cons ['quote (car c')] (cdr c')))]])))

(defn (constructor n xs c)
  (-> [Any Any Any] Any)
  (if (is-symbol c)
      (: ['def c
               (foralls xs (cons n xs))
               ['unsafe-coerce ['quote c]]]
         Any)
      (let ((c' (cons (car c) (unsafe-gensyms (cdr c)))))
        ['defn c'
          (foralls xs ['-> (cons 'tuple (cdr c)) (cons n xs)])
          ['unsafe-coerce (cons 'tuple (cons ['quote (car c')] (cdr c')))]])))

(defn (cons-pred1 n c)
  (-> [Any Any] Any)
  (let ((g (unsafe-gensym)))
    (if (is-symbol c)
        (: ['defn [(symbol-concat 'is (unsafe-coerce c)) g]
             ['-> ['tuple n] 'Bool]
             ['top-eq ['quote c] g]]
           Any)
        ['defn [(symbol-concat 'is (unsafe-coerce (car c))) g]
          ['-> ['tuple n] 'Bool]
          ['if ['is-pair g]
               ['top-eq ['quote (car c)] ['car g]]
               'False]])))

(defn (cons-pred n xs c)
  (-> [Any Any Any] Any)
  (let ((g (unsafe-gensym)))
    (if (is-symbol c)
        (: ['defn [(symbol-concat 'is (unsafe-coerce c)) g]
             (foralls xs ['-> ['tuple (cons n xs)] 'Bool])
             ['top-eq ['quote c] g]]
           Any)
        ['defn [(symbol-concat 'is (unsafe-coerce (car c))) g]
          (foralls xs ['-> ['tuple (cons n xs)] 'Bool])
          ['if ['is-pair g]
               ['top-eq ['quote (car c)] ['car g]]
               'False]])))

(defn (cons-acc1-p n g c)
  (-> [Any Any Any] (-> [Any Any] Any))
  (lambda (s p)
    [(symbol-concat (unsafe-coerce (car s)) 'i)
     ['cdr (cadr s)]
     (cons
      ['defn [(car s) g]
        ['-> ['tuple n] p]
        ['unsafe-coerce ['car (cadr s)]]]
      (caddr s))]))

(defn (cons-acc-p n xs g c)
  (-> [Any Any Any Any] (-> [Any Any] Any))
  (lambda (s p)
    [(symbol-concat (unsafe-coerce (car s)) 'i)
     ['cdr (cadr s)]
     (cons
      ['defn [(car s) g]
        (foralls xs ['-> ['tuple (cons n xs)] p])
        ['unsafe-coerce ['car (cadr s)]]]
      (caddr s))]))

(defn (cons-acc1 n c)
  (-> [Any Any] Any)
  (if (is-symbol c)
      (: () Any)
      (let ((g (unsafe-gensym)))
        (cons 'begin
              (caddr (top-foldl
                      (cons-acc1-p n g (car c))
                      [(symbol-concat
                        'unsafe-
                        (symbol-concat (unsafe-coerce (car c)) '-i))
                       ['cdr g]
                       []]
                      (cdr c)))))))

(defn (cons-acc n xs c)
  (-> [Any Any Any] Any)
  (if (is-symbol c)
      (: () Any)
      (let ((g (unsafe-gensym)))
        (cons 'begin
              (caddr (top-foldl
                      (cons-acc-p n xs g (car c))
                      [(symbol-concat
                        'unsafe-
                        (symbol-concat (unsafe-coerce (car c)) '-i))
                       ['cdr g]
                       []]
                      (cdr c)))))))

(defn (data1 n cs)
  (-> [Any Any] Any)
  ['begin
    ['def n
          'Type
          ['quote n]]
    (cons 'begin (top-map (lambda (c) (constructor1 n c)) cs))
    (cons 'begin (top-map (lambda (c) (cons-pred1 n c)) cs))
    (cons 'begin (top-map (lambda (c) (cons-acc1 n c)) cs))])

(defn (data-arg-name x)
  (-> [Any] Any)
  (if (is-symbol x)
      x
      (cadr x)))

(defn (data-arg-kind x)
  (-> [Any] Any)
  (if (is-symbol x)
      (: 'Type Any)
      (caddr x)))

(defn (data' n xs cs)
  (-> [Any Any Any] Any)
  (let ((ps (top-map data-arg-name xs)))
    ['begin
      ['def n
            ['-> (cons 'tuple (top-map data-arg-kind xs)) 'Type]
            ['lambda ps [': (cons 'tuple (cons ['quote n] ps)) 'Type]]]
      (cons 'begin (top-map (lambda (c) (constructor n ps c)) cs))
      (cons 'begin (top-map (lambda (c) (cons-pred n ps c)) cs))
      (cons 'begin (top-map (lambda (c) (cons-acc n ps c)) cs))]))

(def data
     (-> (cons Any Any) Any)
     (macro d
       (if (is-symbol (car d))
           (data1 (car d) (cdr d))
           (data' (caar d) (cdar d) (cdr d)))))

(defn (top-init xs)
  (forall (a) (-> [a] Any))
  (if (is-nil (cdr xs))
      (: () Any)
      (cons (car xs) (top-init (cdr xs)))))

(defn (top-last xs)
  (forall (a) (-> [a] Any))
  (if (is-nil (cdr xs))
      (car xs)
      (top-last (cdr xs))))

(def cond
     (-> Any Any)
     (macro cs
       (top-foldr (: (lambda (c e) ['if (car c) (cadr c) e])
                     (-> [[Any Any] Any] Any))
                  (top-last cs)
                  (top-init cs))))
