(def car
     (-> Any Any)
     (unsafe-coerce fst))

(def cdr
     (-> Any Any)
     (unsafe-coerce snd))

(def caar (-> Any Any) (_lambda x (car (car (car x)))))
(def cdar (-> Any Any) (_lambda x (cdr (car (car x)))))
(def cadr (-> Any Any) (_lambda x (car (cdr (car x)))))
(def cddr (-> Any Any) (_lambda x (cdr (cdr (car x)))))

(def caaar (-> Any Any) (_lambda x (car (car (car (car x))))))
(def caadr (-> Any Any) (_lambda x (car (car (cdr (car x))))))
(def caddr (-> Any Any) (_lambda x (car (cdr (cdr (car x))))))
(def cdadr (-> Any Any) (_lambda x (cdr (car (cdr (car x))))))
(def cddar (-> Any Any) (_lambda x (cdr (cdr (car (car x))))))

(def tuple'
     (-> Any Any)
     (_lambda t
       (if (is-nil t) (: () Any)
           (cons 'cons
                 (cons (car t)
                       (cons (apply tuple' (cdr t))
                             ()))))))

(def tuple
     (-> Any Any)
     (_macro t (apply tuple' t)))

(def let1'
     (-> Any Any)
     (_lambda x
       ['apply
        ['_lambda (car x) (caddr x)]
        (cadr x)]))

(def let1
     (-> [Symbol Any Any] Any)
     (_macro x (apply let1' x)))

(def lambda'
     (-> Any Any)
     (_lambda l
       ['apply
        (cons '_lambda
              (cons (caadr l)
                    (if (is-nil (cdadr l))
                        (cddr l)
                        [(apply lambda' (cons ['snd (car l)]
                                              (cons (cdadr l)
                                                    (cddr l))))])))
        ['fst (car l)]]))

(def lambda
     (-> Any Any)
     (_macro l
       (if (is-nil (car l))
           (: (cons '_lambda
                    (cons (unsafe-gensym) (cdr l)))
              Any)
           (if (is-symbol (car l))
               (: (cons '_lambda l) Any)
               (let1 v (unsafe-gensym)
                     ['_lambda v (apply lambda' (cons v l))])))))

(def macro
     (-> Any Any)
     (_macro l
       (if (is-symbol (car l))
           (: (cons '_macro l) Any)
           (let1 v (unsafe-gensym)
                 ['_macro v (apply lambda' (cons v l))]))))

(def defn
     (-> [(cons Symbol Any) Type Any] Any)
     (macro (p t e)
       ['def (fst p) t ['lambda (snd p) e]]))

(def defmacro
     (-> [(cons Symbol Any) Type Any] Any)
     (macro (p t e)
       ['def (car p) t ['macro (cdr p) e]]))

(defn (top-foldr f i l)
  (_forall a (_forall b (-> [(-> [b a] a) a Any] a)))
  (if (is-nil l) i
      (f (unsafe-coerce (car l))
         (top-foldr f i (cdr l)))))

(defn (mk-forall u e)
  (-> [Symbol Any] Any)
  ['_forall u e])

(defmacro (forall us e)
  (-> [Any Any] Any)
  (top-foldr mk-forall e us))

(defn (top-foldl f i l)
  (forall (a b) (-> [(-> [a b] a) a Any] a))
  (if (is-nil l) i
      (top-foldl f (f i (unsafe-coerce (car l))) (cdr l))))

(defn (top-map f l)
  (forall (a b) (-> [(-> [a] b) Any] Any))
  (top-foldr (lambda (x ys)
               (: (cons (f x) ys) Any))
             ()
             l))

(defn (compose f g)
  (forall (a b c)
          (-> [(-> [b] c) (-> [a] b)]
              (-> [a] c)))
  (lambda (x) (f (g x))))

(defn (mk-let b e)
  (forall (a) (-> [[Symbol Any] a] Any))
  [['lambda [(fst b)] e] (fst (snd b))])

(defmacro (let ps e)
  (-> [Any Any] Any)
  (top-foldr mk-let e ps))

(defn (foralls xs e)
  (-> [Any Any] Any)
  (if (is-nil xs)
      (: e Any)
      ['forall xs e]))

(defn (gen-syms xs)
  (-> [Any] Any)
  (top-map (lambda (_) (unsafe-gensym)) xs))

(defn (constructor n xs c)
  (-> [Symbol Any Any] Any)
  (if (is-symbol c)
      (: ['def c
               (foralls xs (cons n xs))
               ['unsafe-coerce ['quote c]]]
         Any)
      (let ((c' (cons (car c) (gen-syms (cdr c)))))
        ['defn c'
          (foralls xs ['-> (cons 'tuple (cdr c)) (cons n xs)])
          ['unsafe-coerce (cons 'tuple (cons ['quote (car c')] (cdr c')))]])))

(defn (data' n xs cs)
  (-> [Symbol Any Any] Any)
  (cons
   'begin
   (cons
    ['def n ['lambda xs [': (cons 'tuple (cons ['quote n] xs)) 'Type]]]
    (top-map (lambda (c) (constructor n xs c))
             cs))))

(def data
     (-> (cons (cons Symbol Any) Any) Any)
     (macro d (data' (fst (fst d)) (cdar d) (cdr d))))

(defn (top-init xs)
  (forall (a) (-> [a] Any))
  (if (is-nil (cdr xs))
      (: () Any)
      (cons (car xs) (top-init (cdr xs)))))

(defn (top-last xs)
  (forall (a) (-> [a] Any))
  (if (is-nil (cdr xs))
      (car xs)
      (top-last (cdr xs))))

(def cond
     (-> Any Any)
     (macro cs
       (top-foldr (: (lambda (c e) ['if (car c) (cadr c) e])
                     (-> [[Any Any] Any] Any))
                  (top-last cs)
                  (top-init cs))))
